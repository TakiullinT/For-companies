import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'gallery.dart';
import 'contact_manager.dart';
import 'package:brandbook_app/screens/profile/profile_screen.dart';

class AboutScreen extends StatelessWidget {
  const AboutScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final List<String> imagePaths = List.generate(
      18,
      (index) => 'assets/images/${index + 1}.png',
    );

    return Scaffold(
      appBar: AppBar(
        title: const Text('–û –∫–æ–º–ø–∞–Ω–∏–∏'),
        actions: [
          IconButton(
            icon: const Icon(Icons.person),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => PersonalAccountScreen()),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView(
          children: [
            sectionCard(
              icon: Icons.flag,
              title: '–ú–∏—Å—Å–∏—è –∏ —Ü–µ–ª—å',
              content:
                  '–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π.\n\n'
                  '–¶–µ–ª—å ‚Äî —Å—Ç–∞—Ç—å –ª–∏–¥–µ—Ä–æ–º –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏ outdoor-—É—Å–ª—É–≥–∞—Ö —Ä–µ–≥–∏–æ–Ω–∞.',
            ),
            sectionCard(
              icon: Icons.settings,
              title: '–ü—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–º–ø–∞–Ω–∏–∏',
              content:
                  '‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—Ç—É ¬´–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –≤–æ–≤—Ä–µ–º—è¬ª\n'
                  '‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n'
                  '‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ\n'
                  '‚Ä¢ –ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã\n'
                  '‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏',
              buttonText: '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã',
              onButtonPressed: () async {
                final url = Uri.parse(
                  'https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FATuMmLj2omHI5MtokjynQzePnQlewUqRldqVOyPSTbYFaQdaUcUz2rzE9TzLoEvOq%2FJ6bpmRyOJonT3VoXnDag%3D%3D%3A%2F–ü—Ä–∏–Ω—Ü–∏–ø—ã%20–†%20–ë—Ä–∑–Ω–¥–±—É–∫.docx&name=–ü—Ä–∏–Ω—Ü–∏–ø—ã%20–†%20–ë—Ä–∑–Ω–¥–±—É–∫.docx&nosw=1',
                );
                if (await canLaunchUrl(url)) {
                  await launchUrl(url, mode: LaunchMode.externalApplication);
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É')),
                  );
                }
              },
              buttonIcon: Icons.download,
            ),
            sectionCard(
              icon: Icons.history,
              title: '–ò—Å—Ç–æ—Ä–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
              content:
                  '–ö–æ–º–ø–∞–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2010 –≥–æ–¥—É. –ë–æ–ª–µ–µ 416 —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–µ.\n\n'
                  '–°—Ä–µ–¥–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ ‚Äî –Ω–∞—Ä—É–∂–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏, –±—Ä–µ–Ω–¥–∏–Ω–≥, —Å–∞–π—Ç—ã, —Å—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è.\n'
                  '–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–∏—Å—å–º–∞–º–∏ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.',
            ),
            const SizedBox(height: 16),

            const Text(
              'üì∑ –ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            GridView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: imagePaths.length,
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemBuilder: (context, index) {
                return GestureDetector(
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) => FullscreenImageScreen(
                          imagePaths: imagePaths,
                          initialIndex: index,
                        ),
                      ),
                    );
                  },
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.asset(imagePaths[index], fit: BoxFit.cover),
                  ),
                );
              },
            ),
            const SizedBox(height: 24),

            ElevatedButton.icon(
              icon: const Icon(Icons.chat),
              label: const Text('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => ContactManagerScreen()),
                );
              },
            ),
            const SizedBox(height: 32),

            sectionCard(
              icon: Icons.folder,
              title: '–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã',
              content: '–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.',
              buttonText: '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª',
              buttonIcon: Icons.download,
              onButtonPressed: () async {
                final url = Uri.parse(
                  'https://disk.yandex.ru/i/ApQ8uhi4shYymw',
                );
                if (await canLaunchUrl(url)) {
                  await launchUrl(url, mode: LaunchMode.externalApplication);
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É')),
                  );
                }
              },
            ),
            sectionCard(
              icon: Icons.slideshow,
              title: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
              content: '–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —É—Å–ª—É–≥, –∫–µ–π—Å–æ–≤ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –±—Ä–µ–Ω–¥–∞.',
              buttonText: '–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
              buttonIcon: Icons.download,
              onButtonPressed: () async {
                final url = Uri.parse(
                  'https://docs.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2FATuMmLj2omHI5MtokjynQzePnQlewUqRldqVOyPSTbYFaQdaUcUz2rzE9TzLoEvOq%2FJ6bpmRyOJonT3VoXnDag%3D%3D%3A%2FBRANDBOOK%20presentation%202.pdf&name=BRANDBOOK%20presentation%202.pdf&nosw=1',
                );
                if (await canLaunchUrl(url)) {
                  await launchUrl(url, mode: LaunchMode.externalApplication);
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É')),
                  );
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget sectionCard({
    required IconData icon,
    required String title,
    required String content,
    String? buttonText,
    IconData? buttonIcon,
    VoidCallback? onButtonPressed,
  }) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 20),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(icon, color: Colors.black, size: 28),
                const SizedBox(width: 8),
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(content, style: const TextStyle(fontSize: 16)),
            if (buttonText != null && onButtonPressed != null) ...[
              const SizedBox(height: 16),
              ElevatedButton.icon(
                icon: Icon(buttonIcon ?? Icons.link),
                label: Text(buttonText),
                onPressed: onButtonPressed,
              ),
            ],
          ],
        ),
      ),
    );
  }
}
